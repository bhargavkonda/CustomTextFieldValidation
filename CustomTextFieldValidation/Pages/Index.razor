@page "/"
@using MudBlazor
@using FluentValidation
@using FluentValidation.Results
@using System.Linq.Expressions

@inject IValidator<UserModel> Validator

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />



<EditForm EditContext="@editContext">
    <MudContainer>


        @foreach (var property in typeof(UserModel).GetProperties())
        {
            var propertyName = property.Name;
            var value = property.GetValue(userModel);
            var propertyType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

            var bindValue = GetValueBinding(propertyName);

            switch (propertyType.Name)
            {
                case "String":
                    <MudItem xs="12">
                        <CustomMudTextField TValue="string" Label="@propertyName" @bind-Value="userModel.FirstName" For="() => userModel.LastName" ValidationState="validationTriggered" />
                    </MudItem>
                    break;
                case "Int32":
                    <MudItem xs="12">
                        <CustomMudIntegerField TValue="int" Label="@propertyName" @bind-Value="userModel.Age" For="() => userModel.Age" ValidationState="validationTriggered" />
                    </MudItem>
                    break;
                // Add cases for other data types if needed
                default:
                    // Handle other data types
                    break;
            }
        }



        <MudButton Type="Button" OnClick="HandleSubmit">Submit</MudButton>
    </MudContainer>
</EditForm>

@code {
    private UserModel userModel = new UserModel();
    private EditContext editContext;
    private ValidationResult validationResult;
    private bool validationTriggered = false;

    protected override void OnInitialized()
    {
        editContext = new EditContext(userModel);
    }

    private async Task HandleSubmit()
    {
        validationResult = await Validator.ValidateAsync(userModel);
        validationTriggered = true;

        if (validationResult.IsValid)
        {
            // Handle valid form submission logic
            Console.WriteLine("Form is valid");
        }
        else
        {
            //// Update the UI to reflect validation errors
            //foreach (var error in validationResult.Errors)
            //{
            //    editContext.NotifyFieldChanged(new FieldIdentifier(userModel, error.PropertyName));
            //}
        }
    }
    private object GetValueBinding(string propertyName)
    {
        var property = typeof(UserModel).GetProperty(propertyName);
        return property.GetValue(userModel);
    }
}

